Find all subarray:
===============
for n -> n(n+1)/2
whereas subsets 2^n 
void printSubArray(int arr[], int n) //O(n^3)
{
 
	 for (int i=0; i <n; i++) //select the starting element
	 {
	 
		 for (int j=i; j<n; j++)   //select the ending element
		 {
			 for (int k=i; k<=j; k++)
			{
				cout << arr[k] << " "; //print all elements between start and end element.
			}
			cout << endl;
		}
}
 }
Maximum Sum of All Sub-arrays
=============================
An array with n elements has n(n+1)/2 sub-arrays
e.g [1] : [1]]
    [1,2] : [1][1,2][3]
	[1,2,3] : [1][1,2][1,2,3][2][2,3][3]
Brute force o(n^2)
Better Solution : Dynamic Programming

Maximum values from each possible sub-array
===========================================
https://www.youtube.com/watch?v=39grPZtywyQ
http://www.ideserve.co.in/learn/maximum-element-from-each-subarray-of-size-k-set-2

E.g. input array:  {9,6,11,8,10,5,14,13,93,14} and k = 4, 
     Subarrays are : {9,6,11,8}, {6,11,8,10} {11,8,10,5} {8,10,5,14},{10,5,14,13} ...
	 output should be 11,11,11,14,14,93,93
	 
	Algo: Stage 1
	for ( i = 0 ; i < k ; i++){
	     1. Remove all indices j's from the rear end of Dequeue
		    for which array[j] < array[i]
		 2. Add index i at the end of the list
	}
	We get largest of first sub-array
	Algo: Stage 2
	for ( i = k ; i < n ; i++){
	     1. Print the element corresponding to the first index in the list
		 2. Remove all the indices from the front-end which won't be included at 
		    current window of size k
		 3. Remove all indices j's from the rear end of Dequeue
		    for which array[j] < array[i]
		 4. Add index i at the end of the list
		}
====
List is dequeue. It stores indices.		
i=0
	0
i=1 
    Is A[list.end] 9 < A[1] 6 no
	0,1
i=2 
    Is A[list.end] 6 < A[2] 11 yes
	  0
	Is A[list.end] 9 < A[2] 11 yes
	  2
i=3 
    Is A[list.end] 11 < A[3] 8 no
	  2,3
====
{9,6,11,8,10,5,14,13,93,14} 	
i = 4
   Print A[List.front i.e 2] = 11 Output: {11}
   Is List.Front = 2 part of current window (4,3,2,1 i.e is List.Front > i-k ) yes
   Is A[list.end 3] 8 < A[4] 10 Yes
      2 
   Is A[list.end 2] 11 < A[4] 10 No
      2,4  
i = 5
   Print A[List.front i.e 2] = 11 Output: {11, 11}
   Is List.Front = 2 part of current window (5,4,3,2 i.e is List.Front > i-k ) yes
   Is A[list.end 4] 10 < A[5] 5 No
      2,4,5
	  (11,10,5)
i = 6
   Print A[List.front i.e 2] = 11 Output: {11, 11, 11}
   Is List.Front = 2 part of current window (6,5,4,3 i.e is List.Front > i-k ) No
      4,5 (10,5)
   Is A[list.end 5] 10 < A[6] 14 Yes
      4
   Is A[list.end 4] 8 < A[6] 14 Yes
      {}
   6
 ...

O(n) 
   

	
	
